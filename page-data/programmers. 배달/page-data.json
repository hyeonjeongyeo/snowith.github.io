{"componentChunkName":"component---src-templates-post-tsx","path":"/programmers. 배달/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>문제: <a href=\"https://programmers.co.kr/learn/courses/30/lessons/12978\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">프로그래머스</a></p>\n</blockquote>\n<h2 id=\"문제-해결-아이디어\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0-%EC%95%84%EC%9D%B4%EB%94%94%EC%96%B4\" aria-label=\"문제 해결 아이디어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 해결 아이디어</h2>\n<p>그래프와 각 간선의 가중치가 주어질 때, 시작 노드에서 출발해 지나는 간선의 가중치를 모두 더해 도착할 때까지 <code class=\"language-text\">가중치의 합</code>이 <code class=\"language-text\">K</code> 이하가 되는 노드를 모두 찾는 문제다. 즉 시작노드에서 특정 노드까지 가중치 합을 최소로 하는 경로를 찾아야 하며, 이런 문제를 <code class=\"language-text\">최단 경로 알고리즘</code>이라고 부른다.</p>\n<blockquote>\n<p><a href=\"https://snowith.github.io/shortest_path/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">최단 경로 알고리즘 알아보기</a></p>\n</blockquote>\n<p>이 문제는 Dijkstra 알고리즘을 구현하여 해결할 수 있다. </p>\n<ol>\n<li>주어진 road의 정보를 한쪽 노드를 키로 하고 반대쪽 노드와 가중치를 값으로 하는 딕셔너리 형태로 저장한다.</li>\n<li>\n<p>다익스트라 알고리즘을 재귀 함수로 구현한다.</p>\n<ul>\n<li>입력 받은 경로와 dist 배열에 저장된 값을 비교하여 업데이트한다.</li>\n<li>시작 노드의 최소 경로에서 연결 된 노드를 연결한 경로에 대해 다익스트라 알고리즘을 실행한다. </li>\n</ul>\n</li>\n<li>시작 노드인 1번 노드와 최단거리 0에 대해 다익스트라 알고리즘을 실행한다.</li>\n<li>K보다 작은 값들을 세어 반환한다.</li>\n</ol>\n<h2 id=\"파이썬-코드\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%BD%94%EB%93%9C\" aria-label=\"파이썬 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파이썬 코드</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> defaultdict\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">,</span> road<span class=\"token punctuation\">,</span> K<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \n    <span class=\"token comment\"># 시작 노드에서 각 노드까지의 거리를 큰 값으로 초기화 한다.</span>\n    <span class=\"token comment\"># 인덱스는 '주어진 노드 - 1'로 설정한다.</span>\n    INF <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span>\n    dist <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>INF<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>N <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    dist<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token comment\"># road의 정보를 딕셔너리로 저장한다.</span>\n    graph <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c <span class=\"token keyword\">in</span> road<span class=\"token punctuation\">:</span>\n        graph<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        graph<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># dijkstra를 구현한다.</span>\n    <span class=\"token comment\"># graph 딕셔너리와 시작노드 v, 최단 경로(시간) time이 주어졌을 때</span>\n    <span class=\"token comment\"># 함수 밖의 dist 배열에 경로의 최소값을 저장한다.</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">dijkstra</span><span class=\"token punctuation\">(</span>start_node<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 최단 경로만 저장한다.</span>\n        <span class=\"token keyword\">if</span> dist<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> time<span class=\"token punctuation\">:</span>\n            dist<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> time\n        <span class=\"token comment\"># 연결된 노드에 대해 dijkstra를 실행한다.</span>\n        <span class=\"token keyword\">for</span> next_<span class=\"token punctuation\">,</span> t <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> t <span class=\"token operator\">+</span> time <span class=\"token operator\">&lt;</span> dist<span class=\"token punctuation\">[</span>next_<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                dijkstra<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> next_<span class=\"token punctuation\">,</span> t <span class=\"token operator\">+</span> time<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># 1번 노드의 최단 경로가 0인 것에서 출발해서</span>\n    <span class=\"token comment\"># 모든 노드의 최단 경로를 찾는다.</span>\n    dijkstra<span class=\"token punctuation\">(</span>graph<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># K 보다 작은 dist의 값들을 세어 반환한다.</span>\n    cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> dist<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> K<span class=\"token punctuation\">:</span>\n            cnt <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">return</span> cnt</code></pre></div>","excerpt":"문제: 프로그래머스 문제 해결 아이디어 그래프와 각 간선의 가중치가 주어질 때, 시작 노드에서 출발해 지나는 간선의 가중치를 모두 더해 도착할 때까지 이  이하가 되는 노드를 모두 찾는 문제다. 즉 시작노드에서 특정 노드까지 가중치 합을 최소로 하는…","tableOfContents":"<ul>\n<li><a href=\"/programmers.%20%EB%B0%B0%EB%8B%AC/#%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0-%EC%95%84%EC%9D%B4%EB%94%94%EC%96%B4\">문제 해결 아이디어</a></li>\n<li><a href=\"/programmers.%20%EB%B0%B0%EB%8B%AC/#%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%BD%94%EB%93%9C\">파이썬 코드</a></li>\n</ul>","fields":{"slug":"/programmers. 배달/"},"frontmatter":{"title":"programmers. 배달","date":"Mar 19, 2022","tags":["Algorithms","Graph","Shortest Path","Dijkstra Algorithm"],"keywords":["lab snowith","snowith"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/programmers. 배달/","series":[],"lastmod":"2022-03-19"}},"staticQueryHashes":["2027115977","694178885"]}