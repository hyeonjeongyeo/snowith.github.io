{"componentChunkName":"component---src-templates-post-tsx","path":"/parser_1/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"들어가며\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0\" aria-label=\"들어가며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가며</h2>\n<p>머신 러닝 프로젝트를 수행할 때 글로벌 상수(constants)를 정의해야 할 일이 생긴다. 예를 들면 시퀀스 데이터의 경우 최대 길이 <code class=\"language-text\">max_length</code>를 설정하고 데이터를 조건에 따라 설정해둔 최대 길이로 자른다(truncate)던지 vocabulary 파일을 불러오고 또 결과값을 저장할 파일 경로를 설정해둔다던지 하는 것이다. 더 보편적으로는 학습을 위한 <code class=\"language-text\">batch_size</code>과 <code class=\"language-text\">epoch</code>를 정해둘 필요가 있다. 여러 노트북에서 이런 설정값(configuration)들이 많아질 경우 1️⃣class 형태로 저장해두고 불러서 쓰거나 2️⃣parser로 처리하는 경우를 보았는데 후자의 경우는 제대로 이해하지 못하고 있었다. 그러다가 Python의 내장 패키지인 <code class=\"language-text\">configparser</code>를 쉽고 친절하게 설명해주는 영상을 찾아 배운 점을 정리하고자 한다.</p>\n<blockquote>\n<p><a href=\"https://kishstats.com/python/2018/03/07/python-config-parser.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">configparser에 대한 친절한 설명 영상 &#x26; 글 보기</a></p>\n</blockquote>\n<h2 id=\"configparser-활용하기\" style=\"position:relative;\"><a href=\"#configparser-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"configparser 활용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>configparser 활용하기</h2>\n<h3 id=\"1-config-파일-쓰기\" style=\"position:relative;\"><a href=\"#1-config-%ED%8C%8C%EC%9D%BC-%EC%93%B0%EA%B8%B0\" aria-label=\"1 config 파일 쓰기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Config 파일 쓰기</h3>\n<p>가장 먼저 할 일은 <code class=\"language-text\">ConfigParser</code> 객체를 생성하는 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> configparser <span class=\"token keyword\">import</span> ConfigParser\n\nconfig <span class=\"token operator\">=</span> ConfigParser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>다음과 같이 <code class=\"language-text\">section</code>과 <code class=\"language-text\">option</code>을 설정할 수 있다.</p>\n<ul>\n<li>config['option_name'] = { 'option_name': value }</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># section for settings</span>\nconfig<span class=\"token punctuation\">[</span><span class=\"token string\">'settings'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\"># config options of settings section.</span>\n    <span class=\"token string\">'debug'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'true'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'secret_key'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'abc123'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'log_path'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'/my_app/log'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># section for database</span>\nconfig<span class=\"token punctuation\">[</span><span class=\"token string\">'db'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'db_name'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'myapp_dev'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'db_host'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'db_port'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'8889'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># section for files</span>\nconfig<span class=\"token punctuation\">[</span><span class=\"token string\">'files'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'use_cdn'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'false'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'images_path'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'/my_app/images'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>configuration 객체에 내용 작성을 끝내면 파일 객체를 생성해 파일 형태로 저장한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># write a config file </span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./dev.ini'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n      config<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"2-config-파일-읽기\" style=\"position:relative;\"><a href=\"#2-config-%ED%8C%8C%EC%9D%BC-%EC%9D%BD%EA%B8%B0\" aria-label=\"2 config 파일 읽기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Config 파일 읽기</h3>\n<p>마찬가지로 객체를 생성한 후, 저장한 Config 파일을 읽어들인다.</p>\n<ul>\n<li>parser.read('file_name')</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> configparser <span class=\"token keyword\">import</span> ConfigParser\n\nparser <span class=\"token operator\">=</span> ConfigParser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nparser<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token string\">'dev.ini'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>필요한 섹션과 파일을 다음과 같이 읽을 수 있다.</p>\n<ul>\n<li>parser.sections()</li>\n<li>parser.options('section_name')</li>\n<li>parser.get('section<em>name', 'option</em>name')</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>parser<span class=\"token punctuation\">.</span>sections<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['settings', 'db', 'files']</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>parser<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">(</span><span class=\"token string\">'settings'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ['debug', 'secret_key', 'log_path']</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>parser<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'settings'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'secret_key'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># abc123</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'db'</span> <span class=\"token keyword\">in</span> parser<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># True</span></code></pre></div>\n<p>특정 자료값으로 바로 읽어들일 수 있는 함수가 있다.</p>\n<ul>\n<li>parser.getint()</li>\n<li>parser.getfloat()</li>\n<li>parser.getboolean()</li>\n</ul>\n<p>이 함수들의 인자로 <code class=\"language-text\">fallback</code>을 설정할 수 있는데, 읽어들이려는 값이 parser 내에 존재하지 않는 경우 default 값으로 반환하는 값이다. 이름처럼 Python <code class=\"language-text\">dict</code>에서 <code class=\"language-text\">get(key, (default_value))</code> 함수를 쓰는 것과 비슷하다. (거의 같다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>parser<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'db'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'db_port'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>parser<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'db'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'db_port'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 8889 &lt;class 'str'></span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>parser<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'db'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'db_port'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 8889 (as int)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>parser<span class=\"token punctuation\">.</span>getint<span class=\"token punctuation\">(</span><span class=\"token string\">'db'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'db_default_port'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 8889 (as int)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>parser<span class=\"token punctuation\">.</span>getint<span class=\"token punctuation\">(</span><span class=\"token string\">'db'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'db_default_port'</span><span class=\"token punctuation\">,</span> fallback<span class=\"token operator\">=</span><span class=\"token number\">3306</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 3306</span></code></pre></div>\n<h2 id=\"3-string-interpolation-사용하기\" style=\"position:relative;\"><a href=\"#3-string-interpolation-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"3 string interpolation 사용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. String Interpolation 사용하기</h2>\n<p>예를 들어서 config를 설정하는 도중에 다른 section의 option의 값을 불러와서 문자열 안에서 활용하고 싶다면 <code class=\"language-text\">ConfigParser()</code>가 문자열을 해석하도록 인자를 전달해야 한다. 예를 들어, 다음과 같이 <code class=\"language-text\">settings</code> section에 있는 option값을 <code class=\"language-text\">files</code> section에서 이용하고자 한다. </p>\n<ul>\n<li>'${section<em>name : option</em>name}other_strings'</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> configparser <span class=\"token keyword\">import</span> ConfigParser\n\nconfig <span class=\"token operator\">=</span> ConfigParser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nconfig<span class=\"token punctuation\">[</span><span class=\"token string\">'settings'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'debug'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'true'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'secret_key'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'abc123'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'log_path'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'/my_app/log'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'python_version'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'packages_path'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'/usr/local'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># ...</span>\n\nconfig<span class=\"token punctuation\">[</span><span class=\"token string\">'files'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'use_cdn'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'false'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'images_path'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'/my_app/images'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'python_path'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'${settings:packages_path}/bin/python${settings:python_version}'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>그러면 Config 파일을 읽을 때 문자열을 해석할 수 있도록 <code class=\"language-text\">ConfigParser</code>에 인자 <code class=\"language-text\">ExtendedInterpolation()</code>을 전달한다. (method call이 되어야 한다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> configparser <span class=\"token keyword\">import</span> ConfigParser<span class=\"token punctuation\">,</span> ExtendedInterpolation\n\nparser <span class=\"token operator\">=</span> ConfigParser<span class=\"token punctuation\">(</span>interpolation<span class=\"token operator\">=</span>ExtendedInterpolation<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nparser<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token string\">'dev.ini'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>parser<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'files'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'python_path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># /usr/local/bin/python3</span></code></pre></div>\n<blockquote>\n<p><a href=\"https://docs.python.org/ko/3/library/configparser.html#interpolation-of-values\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">More about Interpolation on Python docs</a></p>\n</blockquote>\n<h2 id=\"나가며\" style=\"position:relative;\"><a href=\"#%EB%82%98%EA%B0%80%EB%A9%B0\" aria-label=\"나가며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>나가며</h2>\n<p><code class=\"language-text\">ConfigParser</code>에서 <code class=\"language-text\">section</code>이나 <code class=\"language-text\">option</code>을 읽어들이는 것은 Pandas로 <code class=\"language-text\">DataFrame</code>의 <code class=\"language-text\">index</code>와 <code class=\"language-text\">column</code>을 읽어들이는 것과 비슷했다. 새로운 내용을 이해하는데에 기존의 지식이 도움이 되고 있다. 이 기능은 특히 앱 개발에서 설정값을 모아두기 위해 유용하게 쓰일 것 같다. </p>\n<p>사실 parser는 여러가지가 있는데: <code class=\"language-text\">parser</code>, <code class=\"language-text\">argparse</code>, <code class=\"language-text\">configparser</code> 등이 있다. 다음 기회에는 <code class=\"language-text\">argparse</code>에 대해 알아보고, script로 모델을 학습하는 방법을 배우고자 한다.</p>\n<h2 id=\"참고-자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C\" aria-label=\"참고 자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고 자료</h2>\n<ol>\n<li>KishStats blog, <a href=\"https://kishstats.com/python/2018/03/07/python-config-parser.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://kishstats.com/python/2018/03/07/python-config-parser.html</a></li>\n<li>Python docs, <a href=\"https://docs.python.org/ko/3/library/configparser.html#interpolation-of-values\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.python.org/ko/3/library/configparser.html#interpolation-of-values</a></li>\n</ol>","excerpt":"들어가며 머신 러닝 프로젝트를 수행할 때 글로벌 상수(constants)를 정의해야 할 일이 생긴다. 예를 들면 시퀀스 데이터의 경우 최대 길이 를 설정하고 데이터를 조건에 따라 설정해둔 최대 길이로 자른다(truncate)던지 vocabulary …","tableOfContents":"<ul>\n<li><a href=\"/parser_1/#%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0\">들어가며</a></li>\n<li>\n<p><a href=\"/parser_1/#configparser-%ED%99%9C%EC%9A%A9%ED%95%98%EA%B8%B0\">configparser 활용하기</a></p>\n<ul>\n<li><a href=\"/parser_1/#1-config-%ED%8C%8C%EC%9D%BC-%EC%93%B0%EA%B8%B0\">1. Config 파일 쓰기</a></li>\n<li><a href=\"/parser_1/#2-config-%ED%8C%8C%EC%9D%BC-%EC%9D%BD%EA%B8%B0\">2. Config 파일 읽기</a></li>\n</ul>\n</li>\n<li><a href=\"/parser_1/#3-string-interpolation-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">3. String Interpolation 사용하기</a></li>\n<li><a href=\"/parser_1/#%EB%82%98%EA%B0%80%EB%A9%B0\">나가며</a></li>\n<li><a href=\"/parser_1/#%EC%B0%B8%EA%B3%A0-%EC%9E%90%EB%A3%8C\">참고 자료</a></li>\n</ul>","fields":{"slug":"/parser_1/"},"frontmatter":{"title":"configparser","date":"Apr 11, 2022","tags":["Python","Machine Learning"],"keywords":["Dev.Yeo 🏄🏻","hyeonjeong"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/parser_1/","series":[{"slug":"/parser_1/","title":"configparser","num":1}],"lastmod":"2022-04-11"}},"staticQueryHashes":["2027115977","694178885"]}