{"componentChunkName":"component---src-templates-post-tsx","path":"/leetcode_n-queen/","result":{"data":{"markdownRemark":{"html":"<h3 id=\"문제-링크-\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%EB%A7%81%ED%81%AC-\" aria-label=\"문제 링크  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 링크 ♟</h3>\n<blockquote>\n<p><a href=\"https://leetcode.com/problems/n-queens/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">LeetCode, 51. N-Queens I</a></p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://leetcode.com/problems/n-queens-ii/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">LeetCode, 52. N-Queens II</a></p>\n</blockquote>\n<h2 id=\"문제-해결-아이디어\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0-%EC%95%84%EC%9D%B4%EB%94%94%EC%96%B4\" aria-label=\"문제 해결 아이디어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 해결 아이디어</h2>\n<p>체스 보드는 <code class=\"language-text\">8 x 8</code> 크기이므로 본래는 8-Queen 문제였으나, 이 문제들은 <code class=\"language-text\">8</code>을 <code class=\"language-text\">n</code>으로 바꾸어 문제를 한단계 더 추상화했다.</p>\n<p>51번은 <code class=\"language-text\">n x n</code> 보드에 <code class=\"language-text\">n</code>개의 체스 퀸을 위치하는 모든 방법을 출력하는 문제이고, 52번은 같은 설정에서 퀸을 위치하는 방법의 개수를 출력하는 문제이다. 즉, 51번에서 행렬을 직접 출력해야 한다는 점을 빼면 완전히 같은 문제이다.</p>\n<p>이 글에서는 <strong>backtracking</strong>으로 n-퀸 문제를 해결하는 방법을 소개하고자 한다. </p>\n<p> 이 문제를 해결하기 위해서는 퀸들이 위치할 수 있는 모든 지점을 탐색해야 한다. 따라서 체스 보드 위에 행이나 열을 선택해서 첫번째 행이나 열부터 퀸을 위치시키고 (같은 행이나 열에 퀸이 위치해서는 안되므로) 다음 행이나 열에 <code class=\"language-text\">0</code>부터 <code class=\"language-text\">n-1</code> 위치 까지 하나씩 퀸을 위치 시킬 수 있는지 탐색한다. 만약 특정 위치에 퀸이 위치 할 수 없다면 이전 행이나 열로 돌아가 그 다음 위치를 탐색할 수 있다. 이것이 백 트래킹으로, 백 트래킹이란 해를 탐색하다가 특정 경우에서 해가 아닌 것을 확인할 경우 이전의 상태로 돌아가는 방법을 말한다. 즉 완전 탐색과 유사하지만, 해가 아닌 것을 확인할 경우 바로 탐색을 종료하고 다음 경우의 수로 넘어가는 방법이다.</p>\n<p>재귀함수로 구현하면 <code class=\"language-text\">0</code>부터 <code class=\"language-text\">n-1</code>까지 경우를 탐색해 재귀 함수를 실행한 후 해가 아닌 경우 함수를 종료하기만 하면 백 트래킹을 구현할 수 있다. 만약 퀸이 특정 위치에 있을 수 있다면 다음 행이나 열 위치에 대해서 재귀 함수를 실행하면 된다. 이 방법으로는 첫번째 행 또는 열에 대해 백 트래킹을 실행하는 것으로 <code class=\"language-text\">n</code>번째 행 또는 열까지 퀸을 놓는 경우를 모두 탐색할 수 있다. </p>\n<p><code class=\"language-text\">path</code>는 초기화된 <code class=\"language-text\">n</code> 길이의 배열로 퀸의 위치를 저장하는 배열이다. 퀸은 같은 행이나 열에 위치할 수 없으므로 <code class=\"language-text\">path[x] = y</code>라고 할 때 체스 보드 위의 (x, y)지점에 퀸이 있다는 것을 표현할 수 있다. 이때 <code class=\"language-text\">path</code> 내의 모든 x와 y는 중복되지 않을 것이다.</p>\n<p>과정을 요약하면:</p>\n<ul>\n<li><code class=\"language-text\">path</code> 배열을 초기화 한다. <code class=\"language-text\">path</code>는 배열 인덱스 <code class=\"language-text\">i</code>를 행으로 하는 퀸의 열 위치를 원소값으로 한다.</li>\n<li>\n<p>backtrack을 구현한다.</p>\n<ul>\n<li>배열 <code class=\"language-text\">path</code>와 <code class=\"language-text\">nx</code>가 주어졌을 때, 보드의 <code class=\"language-text\">(nx, ny)</code> 위치에 퀸을 위치시켜도 될지를 탐색해서, 만약 가능하다면:</li>\n<li>보드가 <code class=\"language-text\">n</code>개 퀸으로 채워졌으면 카운트를 증가시키거나 배열을 결과값에 추가하고,</li>\n<li>아직 보드가 채워지지 않았으면 <code class=\"language-text\">path[nx]</code>에 <code class=\"language-text\">ny</code>값을 저장하고 <code class=\"language-text\">nx+1</code> 값에 대해 backtrack을 재귀로 구현한다.</li>\n</ul>\n</li>\n<li>tip: <code class=\"language-text\">path</code>가 주어졌을 때 행렬을 출력하는 함수를 구현해서 backtrack에서 부르면 편리하다.</li>\n</ul>\n<h2 id=\"파이썬-구현-코드\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EA%B5%AC%ED%98%84-%EC%BD%94%EB%93%9C\" aria-label=\"파이썬 구현 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파이썬 구현 코드</h2>\n<h3 id=\"51\" style=\"position:relative;\"><a href=\"#51\" aria-label=\"51 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>51.</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">solveNQueens</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        \n        <span class=\"token comment\"># implement backtrack</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">backtrack</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> nx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># search for (nx, ny) positions to place Queen</span>\n            <span class=\"token keyword\">for</span> ny <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> valid<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> nx<span class=\"token punctuation\">,</span> ny<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    path<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ny\n                    <span class=\"token comment\"># if the board is completed,</span>\n                    <span class=\"token comment\"># use path to return a matrix</span>\n                    <span class=\"token keyword\">if</span> nx <span class=\"token operator\">==</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                        ret<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>return_val<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                        backtrack<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> nx<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># return True if placing queen at board[nx][ny] is valid</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">valid</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> nx<span class=\"token punctuation\">,</span> ny<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>nx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> i<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n                <span class=\"token comment\"># if </span>\n                <span class=\"token keyword\">if</span> y <span class=\"token operator\">==</span> ny <span class=\"token keyword\">or</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> nx<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">-</span> ny<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n        \n        <span class=\"token comment\"># given path, return the board in matrix form</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">return_val</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            board <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> n <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">for</span> y <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                board<span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Q'</span>\n            board <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> l <span class=\"token keyword\">in</span> board<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">return</span> board\n        \n        ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> n  <span class=\"token comment\"># a queen is on board[x][path[x]]</span>\n        backtrack<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">return</span> ret</code></pre></div>\n<h3 id=\"52\" style=\"position:relative;\"><a href=\"#52\" aria-label=\"52 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>52.</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">totalNQueens</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">:</span>\n        \n        <span class=\"token comment\"># implement backtrack</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">backtrack</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> nx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># search for (nx, ny) positions to place Queen</span>\n            <span class=\"token keyword\">for</span> ny <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> valid<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> nx<span class=\"token punctuation\">,</span> ny<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    path<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ny\n                    <span class=\"token comment\"># if the board is completed,</span>\n                    <span class=\"token comment\"># increase count by 1</span>\n                    <span class=\"token keyword\">if</span> nx <span class=\"token operator\">==</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> \n                        self<span class=\"token punctuation\">.</span>cnt <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                        backtrack<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> nx<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># return True if placing queen at board[nx][ny] is valid</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">valid</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> nx<span class=\"token punctuation\">,</span> ny<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>nx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> i<span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n                <span class=\"token comment\"># if another queen is at the same line or diagonal, </span>\n                <span class=\"token comment\"># return False</span>\n                <span class=\"token keyword\">if</span> y <span class=\"token operator\">==</span> ny <span class=\"token keyword\">or</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> nx<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">abs</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">-</span> ny<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n        \n        self<span class=\"token punctuation\">.</span>cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> n  <span class=\"token comment\"># a queen is on board[x][path[x]]</span>\n        backtrack<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>cnt</code></pre></div>","excerpt":"문제 링크 ♟ LeetCode, 51. N-Queens I LeetCode, 52. N-Queens II 문제 해결 아이디어 체스 보드는  크기이므로 본래는 8-Queen 문제였으나, 이 문제들은 을 으로 바꾸어 문제를 한단계 더 추상화했다. 51번…","tableOfContents":"<ul>\n<li>\n<ul>\n<li><a href=\"/leetcode_n-queen/#%EB%AC%B8%EC%A0%9C-%EB%A7%81%ED%81%AC-\">문제 링크 ♟</a></li>\n</ul>\n</li>\n<li><a href=\"/leetcode_n-queen/#%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0-%EC%95%84%EC%9D%B4%EB%94%94%EC%96%B4\">문제 해결 아이디어</a></li>\n<li>\n<p><a href=\"/leetcode_n-queen/#%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EA%B5%AC%ED%98%84-%EC%BD%94%EB%93%9C\">파이썬 구현 코드</a></p>\n<ul>\n<li><a href=\"/leetcode_n-queen/#51\">51.</a></li>\n<li><a href=\"/leetcode_n-queen/#52\">52.</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/leetcode_n-queen/"},"frontmatter":{"title":"LeetCode(51, 52). N-Queens I, II","date":"Apr 07, 2022","tags":["Algorithms","Implementation"],"keywords":["snowith lab 🧪","snowith"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/leetcode_n-queen/","series":[],"lastmod":"2022-04-07"}},"staticQueryHashes":["2027115977","694178885"]}