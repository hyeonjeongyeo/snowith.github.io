{"componentChunkName":"component---src-templates-post-tsx","path":"/programmers. 섬 연결하기/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>문제 : <a href=\"https://programmers.co.kr/learn/courses/30/lessons/42861\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">프로그래머스</a></p>\n</blockquote>\n<h3 id=\"문제-해결-아이디어\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0-%EC%95%84%EC%9D%B4%EB%94%94%EC%96%B4\" aria-label=\"문제 해결 아이디어 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 해결 아이디어</h3>\n<p><code class=\"language-text\">두 지점 사이</code>에 대해 건설 비용이 작은 것부터 건설하면 전체 건설 비용이 가장 작도록 선택할 수 있다. 만약 두 지점 사이의 건설 비용이 아니라 부분 그래프의 건설 비용이 주어졌다면 그리디 알고리즘으로 구현할 수 없다.</p>\n<h4 id=\"그리디-알고리즘-구현\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A6%AC%EB%94%94-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EA%B5%AC%ED%98%84\" aria-label=\"그리디 알고리즘 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그리디 알고리즘 구현:</h4>\n<ul>\n<li>건설 비용을 최소화 하는 것이 목적이므로 건설 비용이 저렴한 다리 부터 차례대로 건설한다.</li>\n<li>단, 다리의 양쪽 지점이 이미 연결된 경우에는 고려하지 않는다.</li>\n<li>모든 섬이 연결될 때까지 다리를 추가한다.</li>\n</ul>\n<p>그래프의 모든 노드에 대해 추가한 경로에 속하는 노드가 연결되어 있는지 확인하기 위해 깊이 우선 탐색을 구한현다.</p>\n<h3 id=\"파이썬-코드\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%BD%94%EB%93%9C\" aria-label=\"파이썬 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파이썬 코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> defaultdict\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> costs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cost <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    nodes <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    graph <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 건설 비용이 저렴한 순으로 다리를 정렬한다.</span>\n    costs<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>costs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 다리의 양쪽 지점이 이미 연결되어 있으면 고려하지 않는다.</span>\n        node1<span class=\"token punctuation\">,</span> node2 <span class=\"token operator\">=</span> costs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> connected<span class=\"token punctuation\">(</span>node1<span class=\"token punctuation\">,</span> node2<span class=\"token punctuation\">,</span> graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">continue</span>\n            \n        <span class=\"token comment\"># 양쪽 지점이 연결 되어 있지 않으면 다리를 건설한다.</span>\n        cost <span class=\"token operator\">+=</span> costs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n        graph<span class=\"token punctuation\">[</span>node1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node2<span class=\"token punctuation\">)</span>\n        graph<span class=\"token punctuation\">[</span>node2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>node1<span class=\"token punctuation\">)</span>\n        \n        <span class=\"token comment\"># 모든 노드 node가 연결되어 있으면 멈춘다. </span>\n        flag <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">for</span> node <span class=\"token keyword\">in</span> nodes<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> connected<span class=\"token punctuation\">(</span>node1<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">,</span> graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                flag <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n        <span class=\"token keyword\">if</span> flag<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span>\n    <span class=\"token keyword\">return</span> cost\n\n<span class=\"token comment\"># graph에 있는 root와 target 노드의 연결 여부를 반환한다.</span>\n<span class=\"token comment\"># DFS(깊이 우선 탐색)으로 구현한다.</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">connected</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> graph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> root <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span> \n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n    visited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">while</span> stack<span class=\"token punctuation\">:</span>\n        v <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> v <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">if</span> v <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> visited<span class=\"token punctuation\">:</span>\n            visited<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> u <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span></code></pre></div>","excerpt":"문제 : 프로그래머스 문제 해결 아이디어 에 대해 건설 비용이 작은 것부터 건설하면 전체 건설 비용이 가장 작도록 선택할 수 있다. 만약 두 지점 사이의 건설 비용이 아니라 부분 그래프의 건설 비용이 주어졌다면 그리디 알고리즘으로 구현할 수 없다. …","tableOfContents":"<ul>\n<li><a href=\"/programmers.%20%E1%84%89%E1%85%A5%E1%86%B7%20%E1%84%8B%E1%85%A7%E1%86%AB%E1%84%80%E1%85%A7%E1%86%AF%E1%84%92%E1%85%A1%E1%84%80%E1%85%B5/#%EB%AC%B8%EC%A0%9C-%ED%95%B4%EA%B2%B0-%EC%95%84%EC%9D%B4%EB%94%94%EC%96%B4\">문제 해결 아이디어</a></li>\n<li><a href=\"/programmers.%20%E1%84%89%E1%85%A5%E1%86%B7%20%E1%84%8B%E1%85%A7%E1%86%AB%E1%84%80%E1%85%A7%E1%86%AF%E1%84%92%E1%85%A1%E1%84%80%E1%85%B5/#%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%BD%94%EB%93%9C\">파이썬 코드</a></li>\n</ul>","fields":{"slug":"/programmers. 섬 연결하기/"},"frontmatter":{"title":"programmers. 섬 연결하기","date":"Feb 11, 2022","tags":["Algorithms","programmers","Greedy Algorithm","Graph","DFS"],"keywords":["Lab.Snowith","snowith"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/programmers. 섬 연결하기/","series":[],"lastmod":"2022-02-11"}},"staticQueryHashes":["2027115977","694178885"]}